import telebot
from telebot.types import ReplyKeyboardMarkup
import os

TOKEN = "8292056523:AAGY_0lfU8TvwWQq9l-EP2UDiaI_l9kp3fQ"
bot = telebot.TeleBot(TOKEN)

ADMIN_ID = 6727914616  
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ
photo_path = os.path.join(BASE_DIR, "img", "airpods-1.jpg")
print(f"–ü—ã—Ç–∞—é—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –ø–æ –ø—É—Ç–∏: {photo_path}")
print(f"–§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(photo_path)}")

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–æ–≤–∞—Ä–∞–º–∏
products = {
    "–ù–∞—É—à–Ω–∏–∫–∏ Hoko": {
        "price": 500,
        "description": "üéß –ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —á–∏—Å—Ç—ã–º –∑–≤—É–∫–æ–º HOKO, –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!",
    },
    "–ù–∞—É—à–Ω–∏–∫–∏ AirPods 3": {
        "price": 700,
        "description": "AirPods 3 —Ä–µ–ø–ª–∏–∫–∞ —Å —Ö–æ—Ä–æ—à–∏–º, —á–∏—Å—Ç—ã–º –∑–≤—É–∫–æ–º",
        "photo": photo_path  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—É—Ç—å
    }
}

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üõçÔ∏è –¢–æ–≤–∞—Ä—ã')
    markup.row('üì± –°–æ—Ü—Å–µ—Ç–∏', 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
    markup.row('‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')  
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LitCombany!", reply_markup=main_menu())

@bot.message_handler(func=lambda m: m.text == 'üõçÔ∏è –¢–æ–≤–∞—Ä—ã')
def show_products(message):
    for name, data in products.items():
        try:
            if 'photo' in data and data['photo'] and os.path.exists(data['photo']):
                with open(data['photo'], 'rb') as photo_file:
                    bot.send_photo(
                        chat_id=message.chat.id,
                        photo=photo_file,
                        caption=f"üéß {name}\nüí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\nüìù {data['description']}",
                        reply_markup=products_menu()
                    )
            else:
                bot.send_message(
                    chat_id=message.chat.id,
                    text=f"üéß {name}\nüí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\nüìù {data['description']}",
                    reply_markup=products_menu()
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–æ–≤–∞—Ä–∞ {name}: {str(e)}")
            bot.send_message(
                chat_id=message.chat.id,
                text=f"üéß {name}\nüí∞ –¶–µ–Ω–∞: {data['price']}‚ÇΩ\nüìù {data['description']}\n\n‚ö†Ô∏è –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                reply_markup=products_menu()
            )

def products_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ù–∞—É—à–Ω–∏–∫–∏ Hoko', '–ù–∞—É—à–Ω–∏–∫–∏ AirPods 3')
    markup.row('üîô –ù–∞–∑–∞–¥')
    return markup
# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
@bot.message_handler(func=lambda m: m.text == '‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤')
def ask_review(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ:")
    bot.register_next_step_handler(msg, save_review)

def save_review(message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open('reviews.txt', 'a', encoding='utf-8') as f:
        f.write(f"–û—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}:\n{message.text}\n\n")
    

    bot.send_message(
        ADMIN_ID,
        f"üìù –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!\n–û—Ç: @{message.from_user.username}\n–¢–µ–∫—Å—Ç:\n{message.text}"
    )
    

    bot.send_message(
        message.chat.id,
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üíô",
        reply_markup=main_menu()
    )

# –ú–µ–Ω—é —Ç–æ–≤–∞—Ä–æ–≤
def products_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–ù–∞—É—à–Ω–∏–∫–∏ Hoko', '–ù–∞—É—à–Ω–∏–∫–∏ AirPods 3')
    markup.row('üîô –ù–∞–∑–∞–¥')
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LitCombany! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢–æ–≤–∞—Ä—ã" (—Å —Ñ–æ—Ç–æ)
@bot.message_handler(func=lambda m: m.text == 'üõçÔ∏è –¢–æ–≤–∞—Ä—ã')
def show_products(message):
    try:

        for name, data in products.items():
            bot.send_photo(
                message.chat.id,
                data['photo'],
                caption=f"{name}\n–¶–µ–Ω–∞: {data['price']}‚ÇΩ\n{data['description']}"
            )
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=products_menu())
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")

        products_text = "\n\n".join(
            [f"{name} - {data['price']}‚ÇΩ\n{data['description']}" 
             for name, data in products.items()]
        )
        bot.send_message(message.chat.id, products_text, reply_markup=products_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–æ—Ü—Å–µ—Ç–∏"
@bot.message_handler(func=lambda m: m.text == 'üì± –°–æ—Ü—Å–µ—Ç–∏')
def show_socials(message):
    bot.send_message(
        message.chat.id,
        "–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏:\n\n"
        "VK: vk.com/litcomb\n"
        "Instagram: @litcombany\n"
        "Telegram: @litComb",
        reply_markup=main_menu()
    )


@bot.message_handler(func=lambda m: m.text == 'üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
def show_support(message):
    bot.send_message(
        message.chat.id,
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ @greteiks",
        reply_markup=main_menu()
    )

orders = {}  

@bot.message_handler(func=lambda m: m.text in products.keys())
def select_product(message):
    product = message.text
    price = products[product]["price"]
    orders[message.chat.id] = {"product": product, "price": price}
    
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    
    bot.send_message(
        message.chat.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{product}*\n–¶–µ–Ω–∞: *{price}‚ÇΩ*\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:",
        reply_markup=markup,
        parse_mode="Markdown"
    )


@bot.message_handler(func=lambda m: m.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
def confirm_order(message):
    if message.chat.id not in orders:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω", reply_markup=main_menu())
        return
    
    order = orders[message.chat.id]
    user = message.from_user
    


    admin_msg = (
        f"üöÄ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
        f"‚ñ™ –¢–æ–≤–∞—Ä: {order['product']}\n"
        f"‚ñ™ –¶–µ–Ω–∞: {order['price']}‚ÇΩ\n"
        f"‚ñ™ –ö–ª–∏–µ–Ω—Ç: @{user.username}\n"
        f"‚ñ™ ID: {user.id}\n"
        f"‚ñ™ –ò–º—è: {user.first_name} {user.last_name or ''}"
    )
    

    bot.send_message(ADMIN_ID, admin_msg, parse_mode="Markdown")
    

    bot.send_message(
        message.chat.id,
        f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –¢–æ–≤–∞—Ä: {order['product']}\n"
        f"–¶–µ–Ω–∞: {order['price']}‚ÇΩ\n"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.",
        reply_markup=main_menu()
    )
    

    del orders[message.chat.id]


@bot.message_handler(func=lambda m: m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
def cancel_order(message):
    if message.chat.id in orders:
        del orders[message.chat.id]
    bot.send_message(
        message.chat.id,
        "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω",
        reply_markup=products_menu()
    )


@bot.message_handler(func=lambda m: m.text == 'üîô –ù–∞–∑–∞–¥')
def back_to_main(message):
    bot.send_message(
        message.chat.id,
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu()
    )


faq = {
    "–î–æ—Å—Ç–∞–≤–∫–∞": "üöö –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞! –°—Ä–æ–∫–∏: 3-5 –¥–Ω–µ–π –ø–æ —Ä–æ—Å—Å–∏–∏.",
    "–û–ø–ª–∞—Ç–∞": "üí≥ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É.",
    "–ì–∞—Ä–∞–Ω—Ç–∏—è": "üîß –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –¥–Ω—è –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è."
}


@bot.message_handler(commands=['faq'])
def show_faq(message):
    text = "\n\n".join([f"**{q}**\n{a}" for q, a in faq.items()])
    bot.send_message(message.chat.id, text, parse_mode="Markdown")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling()